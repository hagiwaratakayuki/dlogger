// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class onAddLog extends ethereum.Event {
  get params(): onAddLog__Params {
    return new onAddLog__Params(this);
  }
}

export class onAddLog__Params {
  _event: onAddLog;

  constructor(event: onAddLog) {
    this._event = event;
  }

  get log(): string {
    return this._event.parameters[0].value.toString();
  }

  get origin(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get caller(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get logger(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Logger__objectsResult {
  value0: BigInt;
  value1: string;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: string, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getPrev(): BigInt {
    return this.value0;
  }

  getLog(): string {
    return this.value1;
  }

  getBlockNumber(): BigInt {
    return this.value2;
  }

  getTimeStamp(): BigInt {
    return this.value3;
  }
}

export class Logger__readLogResultValue0Struct extends ethereum.Tuple {
  get prev(): BigInt {
    return this[0].toBigInt();
  }

  get log(): string {
    return this[1].toString();
  }

  get blockNumber(): BigInt {
    return this[2].toBigInt();
  }

  get timeStamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class Logger__readLogResult {
  value0: Array<Logger__readLogResultValue0Struct>;
  value1: BigInt;

  constructor(
    value0: Array<Logger__readLogResultValue0Struct>,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Array<Logger__readLogResultValue0Struct> {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Logger extends ethereum.SmartContract {
  static bind(address: Address): Logger {
    return new Logger("Logger", address);
  }

  addLog(log: string): boolean {
    let result = super.call("addLog", "addLog(string):(bool)", [
      ethereum.Value.fromString(log)
    ]);

    return result[0].toBoolean();
  }

  try_addLog(log: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("addLog", "addLog(string):(bool)", [
      ethereum.Value.fromString(log)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  count(): BigInt {
    let result = super.call("count", "count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("count", "count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  heads(param0: Bytes): BigInt {
    let result = super.call("heads", "heads(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_heads(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("heads", "heads(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  objects(param0: BigInt): Logger__objectsResult {
    let result = super.call(
      "objects",
      "objects(uint256):(uint256,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Logger__objectsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_objects(param0: BigInt): ethereum.CallResult<Logger__objectsResult> {
    let result = super.tryCall(
      "objects",
      "objects(uint256):(uint256,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Logger__objectsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  readLog(origin: Bytes, sender: Bytes, start: BigInt): Logger__readLogResult {
    let result = super.call(
      "readLog",
      "readLog(bytes20,bytes20,uint256):((uint256,string,uint256,uint256)[10],uint256)",
      [
        ethereum.Value.fromFixedBytes(origin),
        ethereum.Value.fromFixedBytes(sender),
        ethereum.Value.fromUnsignedBigInt(start)
      ]
    );

    return new Logger__readLogResult(
      result[0].toTupleArray<Logger__readLogResultValue0Struct>(),
      result[1].toBigInt()
    );
  }

  try_readLog(
    origin: Bytes,
    sender: Bytes,
    start: BigInt
  ): ethereum.CallResult<Logger__readLogResult> {
    let result = super.tryCall(
      "readLog",
      "readLog(bytes20,bytes20,uint256):((uint256,string,uint256,uint256)[10],uint256)",
      [
        ethereum.Value.fromFixedBytes(origin),
        ethereum.Value.fromFixedBytes(sender),
        ethereum.Value.fromUnsignedBigInt(start)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Logger__readLogResult(
        value[0].toTupleArray<Logger__readLogResultValue0Struct>(),
        value[1].toBigInt()
      )
    );
  }
}

export class AddLogCall extends ethereum.Call {
  get inputs(): AddLogCall__Inputs {
    return new AddLogCall__Inputs(this);
  }

  get outputs(): AddLogCall__Outputs {
    return new AddLogCall__Outputs(this);
  }
}

export class AddLogCall__Inputs {
  _call: AddLogCall;

  constructor(call: AddLogCall) {
    this._call = call;
  }

  get log(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddLogCall__Outputs {
  _call: AddLogCall;

  constructor(call: AddLogCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
